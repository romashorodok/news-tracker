// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package storage

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.articlesStmt, err = db.PrepareContext(ctx, articles); err != nil {
		return nil, fmt.Errorf("error preparing query Articles: %w", err)
	}
	if q.getArticleByIDStmt, err = db.PrepareContext(ctx, getArticleByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticleByID: %w", err)
	}
	if q.newArticleStmt, err = db.PrepareContext(ctx, newArticle); err != nil {
		return nil, fmt.Errorf("error preparing query NewArticle: %w", err)
	}
	if q.newArticleImageStmt, err = db.PrepareContext(ctx, newArticleImage); err != nil {
		return nil, fmt.Errorf("error preparing query NewArticleImage: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.articlesStmt != nil {
		if cerr := q.articlesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing articlesStmt: %w", cerr)
		}
	}
	if q.getArticleByIDStmt != nil {
		if cerr := q.getArticleByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticleByIDStmt: %w", cerr)
		}
	}
	if q.newArticleStmt != nil {
		if cerr := q.newArticleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newArticleStmt: %w", cerr)
		}
	}
	if q.newArticleImageStmt != nil {
		if cerr := q.newArticleImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing newArticleImageStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                  DBTX
	tx                  *sql.Tx
	articlesStmt        *sql.Stmt
	getArticleByIDStmt  *sql.Stmt
	newArticleStmt      *sql.Stmt
	newArticleImageStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                  tx,
		tx:                  tx,
		articlesStmt:        q.articlesStmt,
		getArticleByIDStmt:  q.getArticleByIDStmt,
		newArticleStmt:      q.newArticleStmt,
		newArticleImageStmt: q.newArticleImageStmt,
	}
}
